<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Harry&#39;s Dev Story</title>
        <link>https://blog.harrydev.io/posts/</link>
        <description>Recent content in Posts on Harry&#39;s Dev Story</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ko-kr</language>
        <copyright> &amp;#183; &lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Mon, 12 Aug 2019 03:00:00 +0900</lastBuildDate>
        <atom:link href="https://blog.harrydev.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>[Blog Setup] 3.Travis CI로 Github Pages에 Blog 배포하기.</title>
            <link>https://blog.harrydev.io/posts/dev/2019/08/deploy-blog-to-github-pages-with-travis/</link>
            <pubDate>Mon, 12 Aug 2019 03:00:00 +0900</pubDate>
            
            <guid>https://blog.harrydev.io/posts/dev/2019/08/deploy-blog-to-github-pages-with-travis/</guid>
            <description>지난 글에서 Hugo로 Static Page를 생성해 보았다. 이제 다른 사람이 볼 수 있도록 웹에 서비스를 배포할 차례이다 ​ 이를 위해서는 다양한 방법이 존재 하며 원하는 방식</description>
            <content type="html"><![CDATA[<p><a href="/posts/dev/2019/08/hugo_basic">지난 글에서</a> Hugo로 Static Page를 생성해 보았다.</p>
<p>이제 다른 사람이 볼 수 있도록 웹에 서비스를 배포할 차례이다</p>
<p>​</p>
<p>이를 위해서는 다양한 방법이 존재 하며 원하는 방식으로 선택을 하면 된다.</p>
<ul>
<li>낮은 사양의 컴퓨터를 사용하여 <code>개인 서버</code>를 운영 하면서 서비스</li>
<li><code>AWS</code>의 <code>S3</code>를 이용하여 서비스 ( + <code>CloudFront</code>를 연동)</li>
<li><code>GCP</code>의 <code>CloudStorage</code>를 이용하여 서비스 ( + <code>Cloud Load Balancing</code>(+ <code>Cloud CDN</code>)을 연동)</li>
<li><code>Firebase</code>를 이용하여 서비스</li>
<li><code>Heroku</code>를 이용하여 서비스</li>
<li><code>Netlify</code>를 이용하여 서비스</li>
<li><code>Github Pages</code>를 이용하여 서비스</li>
<li>그 외&hellip;</li>
</ul>
<p>그 중 비용 생각 안해도 되고 Custom Domain연동에 HTTPS도 지원하는 Github Pages를 사용하도록 하겠다.</p>
<p>(물론 다른 서비스들도 이 블로그 처럼 트레픽도 없고 사이즈도 작다면 대부분 무료 플렌으로 충분히 커버가 가능하다.)</p>
<p>​</p>
<p>어느 서비스를 통하여 블로그를 올릴지 정했으면, 이제 올려 보도록 하자.</p>
<p><code>Github Pages</code>는 간단히 자신의 <code>Github</code>에 <code>{자신의 username}.github.io</code>로 <code>repository</code>를 생성하면 준비가 끝난다.</p>
<p>​</p>
<p>이제 해당 repository에 배포를 해보자</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># 여기서 {username}은 github 계정이다. ex) example/example.github.io</span>
$ git clone git@github.com:<span style="color:#f92672">{</span>username<span style="color:#f92672">}</span>/<span style="color:#f92672">{</span>username<span style="color:#f92672">}</span>.github.io.git blog
$ cd blog
<span style="color:#75715e"># 이미 내용이 있다면 삭제한 글이 남아있지 않도록 지워준다</span>
$ rm -rf *
<span style="color:#75715e"># 지난번에 generate한 결과물을 전부 복사해 온다.</span>
$ cp -R ../my_blog/public/* ./
$ git add . <span style="color:#f92672">&amp;&amp;</span> git commit -m <span style="color:#e6db74">&#34;my first blog&#34;</span> <span style="color:#f92672">&amp;&amp;</span> git push
</code></pre></div><p>이제 <code>http://{username}.github.io/</code>로 접속하면 올라간 것을 확인 할 수 있을 것이다.</p>
<p>​</p>
<p>하지만 매번 이렇게 수동으로 생성하고 배포 할 것인가.</p>
<p>그냥 글을 쓰고 올리면 생성하고 배포까지 하도록 <code>Travis CI</code>를 이용하여 설정해 보자.</p>
<p>​</p>
<p>먼저 시작하기 전에 어떠한 방법으로 구성을 할 것인지 간단하게 알아보자.</p>
<p>Github Pages는 몇가지 static page를 서비스 하기 위한 방법을 제공한다.</p>
<ul>
<li><code>{username}.github.io</code>로 생성된 repository에서는 <code>master</code> branch</li>
<li><code>그 외</code>의 repository에서는 설정에 따라 <code>master</code> or <code>gh-pages</code> branch
<ul>
<li>master branch의 <code>/docs</code> 폴더로도 설정이 가능하다고 한다.</li>
</ul>
</li>
</ul>
<p>나는 <code>{username}.github.io</code>를 사용할 예정이므로 해당 repository의 <code>develop</code> branch에 hugo project를 올리고 <code>push</code>가 되면 Travis CI에서 static page generate를 시행한 뒤 <code>master</code> branch에 commit을 하여  <code>deploy</code>되도록 구성 할 것이다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># develop branch로 변경해준다.</span>
$ git checkout -b develop
<span style="color:#75715e"># 기존의 파일을 전부 지우고 만들었던 project를 전부 복사해 온다.</span>
$ rm -rf * <span style="color:#f92672">&amp;&amp;</span> cp -R ../my_blog/* ./
<span style="color:#75715e"># public은 generate 결과이므로 ignore를 걸어둔다.</span>
$ echo <span style="color:#e6db74">&#34;public/&#34;</span> &gt;&gt; .gitignore
$ git add .
$ git commit -m <span style="color:#e6db74">&#34;hugo project init&#34;</span> <span style="color:#f92672">&amp;&amp;</span> git push
</code></pre></div><p>​</p>
<p>프로젝트를 repository에 올려두었으니 이제 Travis 설정을 할 차례이다.</p>
<p>Travis는 <code>.travis.yml</code>로 어떤 작업을 수행 할 것인지를 정의할 수 있다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#75715e"># 어떠한 환경에서 진행할 것인지를 정한다. (Ubuntu 16.04 Xenial)</span>
<span style="color:#66d9ef">dist</span>: xenial

<span style="color:#75715e"># 어느 branch에 이벤트를 받아서 진행할 것인지 정한다. (develop branch에서만 진행함.) </span>
<span style="color:#66d9ef">branches</span>:
  <span style="color:#66d9ef">only</span>:
    - develop

<span style="color:#75715e"># CI를 시작하기 전 필요한 addon을 설정할 수 있다.</span>
<span style="color:#66d9ef">addons</span>:
<span style="color:#75715e"># linux package manager중 snap을 사용할 것이며 hugo를 받으면서 channel option으로 extended를 주었다.</span>
<span style="color:#75715e"># Sass/SCSS를 사용하지 않는다면 channel를 제외해도 무관하다.</span>
<span style="color:#75715e"># $ sudo snap install hugo --channel=extended</span>
  <span style="color:#66d9ef">snaps</span>:
    - <span style="color:#66d9ef">name</span>: hugo
      <span style="color:#66d9ef">channel</span>: extended

<span style="color:#75715e"># 실행할 스크립트</span>
<span style="color:#66d9ef">script</span>:
<span style="color:#75715e"># draft는 generate 하지않을 것이므로 옵션없이 hugo 실행.</span>
  - hugo

<span style="color:#75715e"># 생성 후 deploy를 하기위한 설정이다.</span>
<span style="color:#66d9ef">deploy</span>:
<span style="color:#75715e"># 여러가지 provider를 지원하고 있으며, 그 중 Github Pages를 사용</span>
  <span style="color:#66d9ef">provider</span>: pages
  <span style="color:#75715e"># 빌드 후 작업 dir을 stash할 것 인지를 나타낸다. (반드시 true로 설정.)</span>
  <span style="color:#75715e"># 만일 false이면 git stash --all 을 실행</span>
  <span style="color:#66d9ef">skip_cleanup</span>: <span style="color:#66d9ef">true</span>
  <span style="color:#75715e"># 커밋의 기록을 유지하고자 하면 true</span>
  <span style="color:#75715e"># 기본은 false : force push</span>
  <span style="color:#66d9ef">keep_history</span>: <span style="color:#66d9ef">true</span>
  <span style="color:#75715e"># 대상 repository</span>
  <span style="color:#66d9ef">repo</span>: ${USERNAME}/${USERNAME}.github.io
  <span style="color:#75715e"># 대상 branch</span>
  <span style="color:#66d9ef">target_branch</span>: master
  <span style="color:#75715e"># 진행할 환경. (이미 위에서 설정을 하였기 때문에 건너 뛰어도 될 것 같다)</span>
  <span style="color:#66d9ef">on</span>:
    <span style="color:#66d9ef">branch</span>: develop
  <span style="color:#75715e"># 어느것을 올릴것인가 (hugo generate 결과 dir)</span>
  <span style="color:#66d9ef">local_dir</span>: public
  <span style="color:#75715e"># 해당 repository에 올리기 위한 github token</span>
  <span style="color:#66d9ef">github_token</span>: $GITHUB_TOKEN
  <span style="color:#75715e"># commit에 남길 email과 name (optional)</span>
  <span style="color:#66d9ef">email</span>: $EMAIL
  <span style="color:#66d9ef">name</span>: $NAME
</code></pre></div><p>아주 간단하게 이와 같이 정의가 된다.</p>
<p><strong>여기서 나온 환경변수는 Travis CI 사이트에서 설정하는 값이니 넣지 않는다.</strong></p>
<p>특히 <strong>GITHUB_TOKEN</strong>은 절대로 코드상에 넣지 않는다.</p>
<p>​</p>
<p><code>.travis.yml</code>을 추가 하였으면 commit/push를 해준다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git add .travis.yml
$ git commit -m <span style="color:#e6db74">&#34;travis init&#34;</span> <span style="color:#f92672">&amp;&amp;</span> git push
</code></pre></div><p>​</p>
<p>​</p>
<p>이제 <a href="https://travis-ci.org/">Travis CI</a>를 들어가 Github으로 로그인을 해주자.</p>
<p>로그인을 하면 public repository목록이 나오고 그 중에 <code>{username}.github.io</code> repository를 선택해서 들어간다.</p>
<p>(만일 나오지 않는다면 <a href="https://travis-ci.org/%7Busername%7D/%7Busername%7D.github.io">https://travis-ci.org/{username}/{username}.github.io</a> 로 들어갈 수 있다)</p>
<p><img src="/dev/travis/not-an-active-repository.png" alt="not an active repository" title="아직 활성화가 안되어 있다."></p>
<p><code>Activate repotository</code>를 눌러 활성화를 해주자!</p>
<p>​</p>
<p>활성화가 되었다면 <code>More Options</code> &gt; <code>Settings</code>를 들어가서 몇몇 설정을 해주자.</p>
<p><img src="/dev/travis/settings.png" alt="travis settings" title="Travis 설정을 해주자"></p>
<ul>
<li>General에서
<ul>
<li>build pushed branches를 켜서 push event가 발생하면 진행되도록 설정</li>
</ul>
</li>
<li>Environment Variables에 <code>.travis.yml</code>에서 사용된 변수들을 추가해 준다
<ul>
<li>USERNAME, GITHUB_TOKEN, NAME, EMAIL</li>
<li>Github token은 <a href="https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line">이와 같은 방법</a>으로 생성 할 수 있다</li>
</ul>
</li>
</ul>
<p>이것으로 설정이 모두 끝났다.</p>
<p>​</p>
<p>새로운 글을 작성하고 develop branch로 올려보자.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ hugo new posts/new_post.md
$ vim content/posts/new_post.md
<span style="color:#75715e"># 글을 작성하고 draft : false로 변경!</span>
$ git add content/
$ git commit -m <span style="color:#e6db74">&#34;두번째 post&#34;</span> <span style="color:#f92672">&amp;&amp;</span> git push
</code></pre></div><p><img src="/dev/travis/build-history-github-pages.png" alt="Travis CI build history" title="Travis의 빌드 히스토리"></p>
<p><img src="/dev/github/github-page-commit-log.png" alt="Github commit log" title="Github 커밋 로그"></p>
<p>이제 새로운 글을 작성하고 develop에 push만 한다면 생성과 배포까지 자동으로 이루어 지게 된다.</p>
<p>​</p>
<p>다음번에는 Custom Domain을 붙이고 HTTPS로 서비스를 하는법을 끄적여 봐야겠다.</p>
<p>​</p>
<hr>
<p>— <strong>Prev</strong> : <a href="/posts/dev/2019/08/hugo_basic">[Blog Setup] 2.Hugo를 이용한 Static Page 생성</a>]</p>
<p>— <strong>Next</strong> : TODO&hellip;</p>
]]></content>
        </item>
        
        <item>
            <title>[Blog Setup] 2.Hugo를 이용한 Static Page 생성</title>
            <link>https://blog.harrydev.io/posts/dev/2019/08/hugo_basic/</link>
            <pubDate>Fri, 09 Aug 2019 12:30:00 +0900</pubDate>
            
            <guid>https://blog.harrydev.io/posts/dev/2019/08/hugo_basic/</guid>
            <description>Hugo를 사용하기로 하였으니 간단한 사용법을 정리해 보려고 한다. 사실 Hugo 사이트에 아주 잘 설명이 되어 있다. ​ 먼저 설치를 해보도록 하자. # 설치를 위한 다양한</description>
            <content type="html"><![CDATA[<p><code>Hugo</code>를 사용하기로 하였으니 간단한 사용법을 정리해 보려고 한다.</p>
<p>사실 <a href="https://gohugo.io/getting-started/quick-start/">Hugo 사이트</a>에 아주 잘 설명이 되어 있다.</p>
<p>​</p>
<p>먼저 설치를 해보도록 하자.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># 설치를 위한 다양한 방법을 지원하고 있다.</span>
<span style="color:#75715e"># brew를 이용하여 (mac, linux)</span>
$ brew install hugo
<span style="color:#75715e"># snap을 이용하여 (linux)</span>
$ snap install hugo
<span style="color:#75715e"># chocolatey를 이용하여 (windows)</span>
$ choco install hugo
<span style="color:#75715e"># source를 받아서 직접.</span>
$ git clone https://github.com/gohugoio/hugo.git <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>  cd hugo <span style="color:#f92672">&amp;&amp;</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>  go install 
  <span style="color:#75715e"># 만일 Sass/SCSS를 사용할 예정이라면 &gt; go install --tags extended</span>
<span style="color:#75715e"># 혹은 binary 다운로드 : https://github.com/gohugoio/hugo/releases</span>
<span style="color:#75715e"># 그 외 다양한 package installer를 지원합니다.</span> 
<span style="color:#75715e"># 	- https://gohugo.io/getting-started/installing</span>
</code></pre></div><p>개인적으로는 source를 받아서 설치하는 방법으로 설치를 하였다.</p>
<p>처음에는 잘 안보고 <code>--tags extened</code> 옵션을 안붙이고 설치를 했다가 애러가 나서 당황 했었다&hellip;</p>
<blockquote>
<p>error: failed to transform resource: TOCSS: failed to transform &ldquo;scss/main.scss&rdquo; (text/x-scss): this feature is not available in your current Hugo version, see <a href="https://goo.gl/YMrWcn">https://goo.gl/YMrWcn</a> for more information</p>
</blockquote>
<p>extended version은 기본 버전에서 <code>Sass/SCSS</code> 프로세싱을 지원이 추가된 버전으로 만약 Sass/SCSS를 사용한다면 반드시 extended version으로 설치하여야 한다.</p>
<p>참고로 기본 installer로 설치한 버전의 경우 extended 버전이 아닐 수도 있다.</p>
<p>(mac에서는 brew로 설치를 해본결과 extended 버전이며 linux에서 snap을 사용할 경우 extended 버전이 아니다. )</p>
<p>​</p>
<p>​</p>
<p>설치가 끝났으면 이제 프로젝트를 생성해 보자.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ hugo new site my_blog
Congratulations! Your new Hugo site is created in /home/~~/my_blog.
</code></pre></div><p>hugo에서 site, theme, content를 만들때는 항상 <code>new</code> command를 사용하여 생성한다.</p>
<p>프로젝트 생성은 이것으로 끝났다.</p>
<p>​</p>
<p>바로 결과를 살펴보도록 하자.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ hugo server
...
                   | EN  
+------------------+----+
  Pages            |  <span style="color:#ae81ff">3</span>  
  Paginator pages  |  <span style="color:#ae81ff">0</span>  
  Non-page files   |  <span style="color:#ae81ff">0</span>  
  Static files     |  <span style="color:#ae81ff">0</span>  
  Processed images |  <span style="color:#ae81ff">0</span>  
  Aliases          |  <span style="color:#ae81ff">0</span>  
  Sitemaps         |  <span style="color:#ae81ff">1</span>  
  Cleaned          |  <span style="color:#ae81ff">0</span>  
...
Web Server is available at http://localhost:1313/ <span style="color:#f92672">(</span>bind address 127.0.0.1<span style="color:#f92672">)</span>
</code></pre></div><p>실행을 하면 빌드 결과가 나오고  localhost주소가 나오게 된다.</p>
<p>나와 있는 주소로 들어가면 아주 하얀 화면을 보게 될것이다. (성공적으로 빌드가 되었다.)</p>
<blockquote>
<p>어떤 페이지가 생성이 되었는지 확인 하려면 생성된 sitemap(http://localhost:1313/sitemap.xml) 에서 확인해 볼 수 있고, 그 외의 페이지로 접근 할 경우 404 Not Found 페이지로 넘어가게 된다.</p>
<p>(확인하보면 <code>/</code>, <code>/categories</code> ,<code>/tags</code> 가 생성 된 것을 볼 수 있다.)</p>
</blockquote>
<p>​</p>
<p>​</p>
<p>성공적으로 사이트가 나오는것을 확인하였으니 사이트가 이쁘게 나오도록 만들어 보자.</p>
<p>사이트의 디자인은 theme을 통하여 할 수 있으며 이미 많은 분들이 만들어 두었으니 <a href="https://themes.gohugo.io/">여기서</a>마음에 드는 theme을 받아서 사용을 해 보자.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ git clone https://github.com/budparr/gohugo-theme-ananke.git themes/ananke
$ echo <span style="color:#e6db74">&#39;theme = &#34;ananke&#34;&#39;</span> &gt;&gt; config.toml
$ hugo server
</code></pre></div><p>theme은 theme 디렉토리 하위에 위치하게 되며, config.toml에 어떤 theme을 사용할지 정의를  하게된다.</p>
<p>혹은 <code>hugo server -t ananke</code>와 같이 실행할때 어떠한 theme을 사용할지 지정 할 수도 있다</p>
<p>​</p>
<p>​</p>
<p>이제 뭔가 나오기 시작 하였으니 글을 써 보자.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ hugo new posts/start.md
/home/~~~/my_blog/content/posts/start.md created
$ echo <span style="color:#e6db74">&#34;my first post&#34;</span> &gt;&gt; ./content/posts/start.md
$ hugo server
</code></pre></div><p><code>hugo new</code>로 새로운 content를 생성 하고 내용으로 <code>my first post</code>라는 글을 작성하였다.</p>
<p>하지만 server를 실행하면 빌드 결과가 동일하게 나오는 것을 볼 수 있을것이다.</p>
<p>그 이유는  새로 생성된 content가 draft상태이기 때문이다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ cat ./content/posts/start.md
---
title: <span style="color:#e6db74">&#34;Start&#34;</span>
date: 2019-08-09T02:50:38+09:00
draft: true
---

my first post
</code></pre></div><p>방금 작성한 content 내용을 확인해 보면 <code>draft: true</code>임을 확인 할 수 있고, 이 기능을 통해 publish하지 않을 아직 작성중인 글들을 관리할 수 있다.</p>
<p>하지만 글을 쓰면서 잘 나오는지 확인을 해야하니 draft까지 빌드를 하도록 option을 주어야 한다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ hugo server -D
<span style="color:#75715e"># or $ hugo server --buildDrafts</span>
</code></pre></div><p>이제 성공적으로 글이 보이기 시작할 것이다.</p>
<p>​</p>
<p>하지만 우리는 github혹은 다른곳에 static page를 올릴 예정이므로 server가 아닌 generate를 해야 한다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ hugo
<span style="color:#75715e"># publish할 글은 draft: false로 미리 설정 해두자.</span>
<span style="color:#75715e"># draft포함하여 generate를 하려면</span> 
<span style="color:#75715e">#	$ hugo -D</span>
$ ls public
</code></pre></div><p>이제  <code>public</code> 디렉토리에 생성된 파일들을 올려두면 끝이 난다.</p>
<p>​</p>
<p>다음은 TravisCI로 Generate를 하고 Github Page로 블로그를 서빙할 수 있도록 설정하는 법을 끄적여 보도록 하겠다.</p>
<p>​</p>
<hr>
<p>— <strong>Prev</strong> : <a href="/posts/story/2019/07/restart_blog">[Blog Setup] 1.블로그를 새로 시작하며&hellip;</a></p>
<p>— <strong>Next</strong> : <a href="/posts/dev/2019/08/deploy-blog-to-github-pages-with-travis">[Blog Setup] 3.Travis CI로 Github Pages에 Blog 배포하기.</a></p>
]]></content>
        </item>
        
        <item>
            <title>[Blog Setup] 1.블로그를 새로 시작하며...</title>
            <link>https://blog.harrydev.io/posts/story/2019/07/restart_blog/</link>
            <pubDate>Wed, 24 Jul 2019 00:10:00 +0900</pubDate>
            
            <guid>https://blog.harrydev.io/posts/story/2019/07/restart_blog/</guid>
            <description>블로그를 새롭게 설정하면서 했던 부분들을 정리해 보려고 한다. ​ 이전에는 Naver Blog를 지나 Tistory에서 몇개의 글을 적고.. GitHub Page로 넘어와 Jek</description>
            <content type="html"><![CDATA[<p>블로그를 새롭게 설정하면서 했던 부분들을 정리해 보려고 한다.</p>
<p>​</p>
<p>이전에는 Naver Blog를 지나 <a href="https://blog.skyserv.kr">Tistory</a>에서 몇개의 글을 적고..</p>
<p>GitHub Page로 넘어와 Jekyll를 TravisCI를 이용하여 사용하고 있었다. <del>글은 하나밖에 없었지만..</del></p>
<p>기본적으로 GitHub Page에서 제공하는 Jekyll는 몇가지 <a href="https://help.github.com/en/articles/configuring-jekyll-plugins">Plugin만을 제공하고 있었고</a> 그래서 TravisCI를 통해서 Build하고 Publish하는 방법으로 사용을 하고 있었다.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">source <span style="color:#e6db74">&#39;https://rubygems.org&#39;</span>

gem <span style="color:#e6db74">&#39;jekyll&#39;</span>, <span style="color:#e6db74">&#39;~&gt; 3.2.0&#39;</span>
gem <span style="color:#e6db74">&#39;jekyll-sitemap&#39;</span>
gem <span style="color:#e6db74">&#39;jekyll-multiple-languages&#39;</span>
gem <span style="color:#e6db74">&#39;jekyll-paginate&#39;</span>
gem <span style="color:#e6db74">&#39;wdm&#39;</span>, <span style="color:#e6db74">&#39;&gt;= 0.1.0&#39;</span> <span style="color:#66d9ef">if</span> <span style="color:#66d9ef">Gem</span><span style="color:#f92672">.</span>win_platform?
gem <span style="color:#e6db74">&#39;octopress&#39;</span>
gem <span style="color:#e6db74">&#39;jekyll-gist&#39;</span>
gem <span style="color:#e6db74">&#39;fast-stemmer&#39;</span>
gem <span style="color:#e6db74">&#39;classifier-reborn&#39;</span>
gem <span style="color:#e6db74">&#39;rouge&#39;</span>

gem <span style="color:#e6db74">&#39;html-proofer&#39;</span>, <span style="color:#e6db74">&#39;~&gt; 2.6&#39;</span>
gem <span style="color:#e6db74">&#39;travis&#39;</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#66d9ef">sudo</span>: <span style="color:#66d9ef">false</span>
<span style="color:#66d9ef">language</span>: ruby

<span style="color:#66d9ef">rvm</span>:
  - <span style="color:#ae81ff">2.1</span>

<span style="color:#66d9ef">branches</span>:
  <span style="color:#66d9ef">only</span>:
    - jekyll

<span style="color:#66d9ef">script</span>:
  - bundle exec jekyll build
  - bundle exec htmlproof ./_site --disable-external --href-ignore <span style="color:#e6db74">&#34;#&#34;</span>

<span style="color:#66d9ef">after_success</span>:
  - git clone https://$GH_REF
  - cd $(basename ${GH_REF%.git})
  - git config user.name <span style="color:#e6db74">&#34;Travis-CI&#34;</span>
  - git config user.email ${EMAIL}
  - rsync -az --delete --exclude <span style="color:#e6db74">&#39;.git*&#39;</span> ../_site/ .
  - touch .nojekyll
  - git add -A .
  - git commit -m <span style="color:#e6db74">&#34;Generated Jekyll Site by Travis CI - ${TRAVIS_BUILD_NUMBER}&#34;</span>
  - git push -f <span style="color:#e6db74">&#34;https://${GITHUB_USERNAME}:${GITHUB_TOKEN}@${GH_REF}&#34;</span> ${TARGET_BRANCH} &gt; /dev/<span style="color:#66d9ef">null</span> <span style="color:#ae81ff">2</span>&gt;<span style="color:#75715e">&amp;1</span>

<span style="color:#66d9ef">env</span>:
  <span style="color:#66d9ef">global</span>:
    - NOKOGIRI_USE_SYSTEM_LIBRARIES=<span style="color:#66d9ef">true</span>
</code></pre></div><blockquote>
<p>당시 의존성과 Travis 설정.…</p>
</blockquote>
<p>그런데 어느순간 부터 걸려있는 의존성들의 버전이 올라가면서 build가 자꾸 깨지는 현상이 있었고, 페이지를 수정할때 마다 같이 뭔가 수정을 해줘야 해서 그냥 방치중이였다… <del>page layout만 수정하고 글은 안쓰고…</del></p>
<p>​</p>
<p>그러고 나서 최근에 다시 블로그를 써볼까 하고 다른 Static Page Generator를 찾아보던 와중에 <code>Hugo</code>라는 Generator를 발견하고 쓰기로 결정하였다.</p>
<blockquote>
<p>더 다양한 Generator를 찾아보시려면 <a href="https://www.staticgen.com/">여기로…</a></p>
</blockquote>
<p>결정하게 된 계기는 매우 단순히 <del>Sorting 순으로..</del> 위에 있고 특이하게 <code>Go</code>를 사용 하고 있어서 나중에 커스텀할 일이 있으면 Go도 배워볼 수 있지 않을까 하는 생각으로 결정 하였다.</p>
<p>(쓰다보니 Code Collapsible기능이 필요한데 찾아보고 없으면 시도를 해봐야겠다.)</p>
<p>테마는 일단 지금 쓰고 있는게 괜찮아서 그냥 쓰고 나중에 한번 수정해봐야 겠다.</p>
<p>​</p>
<p><del>그나저나 과연 얼마나 쓰려나&hellip;</del></p>
<p>일단 매일매일 그날 알게된 것(?) 혹은 정리를 안해두었던걸 써봐야 겠다&hellip;</p>
<p>​</p>
<hr>
<p>— <strong>Next</strong> : <a href="/posts/dev/2019/08/hugo_basic">[Blog Setup] 2.Hugo를 이용한 Static Page 생성</a></p>
]]></content>
        </item>
        
    </channel>
</rss>
